server:
  port: 8087
spring:
  application:
    name: hong-coding-user
#  datasource:
#    dynamic:
#      # 指定主数据源名称（必须与下方数据源名称一致）
#      primary: master
  autoconfigure:
    exclude: com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration
  shardingsphere:
    mode:
      type: Memory
    datasource:
      names: master,slave0,slave1
      master:
        type: com.zaxxer.hikari.HikariDataSource  # 显式指定数据源类型
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://117.72.84.26:13306/hong_coding_blog?useUnicode=true&characterEncoding=utf8&autoReconnect=true&zeroDateTimeBehavior=convertToNull&serverTimezone=UTC&useSSL=true
        username: root
        password: 123456
      slave0:
        type: com.zaxxer.hikari.HikariDataSource  # 显式指定数据源类型
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://117.72.84.26:13306/hong_coding_blog_01?useUnicode=true&characterEncoding=utf8&autoReconnect=true&zeroDateTimeBehavior=convertToNull&serverTimezone=UTC&useSSL=true
        username: root
        password: 123456
      slave1:
        type: com.zaxxer.hikari.HikariDataSource  # 显式指定数据源类型
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://117.72.84.26:13306/hong_coding_blog_02?useUnicode=true&characterEncoding=utf8&autoReconnect=true&zeroDateTimeBehavior=convertToNull&serverTimezone=UTC&useSSL=true
        username: root
        password: 123456
    rules:
      # 声明使用读写分离规则
      readwrite-splitting:
        # 读写分离的数据源配置
        data-sources:
          readwrite_ds:
            type: Static
            props:
              # 写操作指向的主数据源名称
              write-data-source-name: master
              # 读操作指向的从数据源名称列表
              read-data-source-names: slave0,slave1
            load-balancer-name: weighted_lb
        load-balancers:
          weighted_lb:
            type: ROUND_ROBIN
            props:
              slave0: 2
              slave1: 1
      # 添加分片规则
      sharding:
        tables:
          user:   # 用户表名
            actual-data-nodes: master.user,slave0.user,slave1.user
        # 设置广播表，这样所有表的操作都会在所有数据源执行
        broadcast-tables:
          - user
          # 后续如果有其他表也需要广播，在这里添加
    props:
      # 是否在日志中打印 SQL。
      # 打印 SQL 可以帮助开发者快速定位系统问题。日志内容包含：逻辑 SQL，真实 SQL 和 SQL 解析结果。
      # 如果开启配置，日志将使用 Topic ShardingSphere-SQL，日志级别是 INFO。 false
      sql-show: true
      # 是否在日志中打印简单风格的 SQL。false
      sql-simple: true
      # 用于设置任务处理线程池的大小。每个 ShardingSphereDataSource 使用一个独立的线程池，同一个 JVM 的不同数据源不共享线程池。
      executor-size: 20
      # 查询请求在每个数据库实例中所能使用的最大连接数。1
      max-connections-size-per-query: 2
      # 在程序启动和更新时，是否检查分片元数据的结构一致性。
      check-table-metadata-enabled: false
      # 在程序启动和更新时，是否检查重复表。false
      check-duplicate-table-enabled: false
      # 在程序启动和更新时，是否检查重复列。false
      sql-comment-parse-enabled: true
      # 添加事务管理器类型（关键修复项）
      transaction-type: BASE

  cloud:
    nacos:
      config:
        server-addr: 117.72.84.26:8848
      discovery:
        server-addr: 117.72.84.26:8848
        fail-fast: false  # 启用失败容忍，允许应用启动后再重试连接
        watch-delay: 30000  # 调整监听延迟

  # Redis 云服务器搭建后配置并重启 【否则会 Unable to connect to 39.96.*.*:6379】
  # 防火墙放行：firewall-cmd --zone=public --add-port=6379/tcp --permanent
  # 防火墙重启：firewall-cmd --reload
  # redis.conf 注释掉 bind 127.0.0.1
  # redis.conf protected-mode yes 改为 protected-mode no
  redis:
    database: 0
    host: 117.72.84.26     # Redis服务器地址，修改为你的地址
    port: 16379          # Redis服务器连接端口
    password:           # Redis服务器连接密码（默认为空）
    timeout: 3000       # Redis服务器链接超时配置

dubbo:
  application:
    name: hong-coding-user
    version: 1.0.0
  protocol:
    name: dubbo
    port: -1
  registry:
    address: nacos://117.72.84.26:8848

# mybatis
mybatis-plus:
  mapper-locations: classpath:mapper/*.xml
  configuration:
    # 禁用 MyBatis-Plus 自带的 SQL 解析器
#    shardingsphere: true
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      logic-delete-field: deleted
      logic-delete-value: 1
      logic-not-delete-value: 0

# xxl-job
# 官网：https://github.com/xuxueli/xxl-job/
# 地址：http://localhost:7397/xxl-job-admin 【需要先启动 xxl-job】
# http://39.96.73.167:7397/xxl-job-admin
# 账号：admin
# 密码：123456
xxl:
  job:
    admin:
      ### 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行"执行器心跳注册"和"任务结果回调"；为空则关闭自动注册；
      address: http://117.72.84.26:7397/xxl-job-admin
    executor:
      ### 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册
      appname: blog-job
      ### 执行器注册 [选填]：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。
      address:
      ### 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 "执行器注册" 和 "调度中心请求并触发任务"；
      ip:
      ### 执行器端口号 [选填]：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；
      port: 9998
      logpath: /Users/sheeran/lottery/data/applogs/xxl-job/jobhandler
      logretentiondays: 50
    accessToken: QWEhong520

# system
system:
  # 是否启用Swagger
  swagger-enabled: false
  # 系统缓存ttl，1天
  cache-default-ttl-seconds: 86400

#监控和健康检查
management:
  endpoints:
    web:
      exposure:
        include: prometheus,health
  endpoint:
    health:
      show-details: always
  metrics:
    tags:
      application: ${spring.application.name}

springdoc:
  swagger-ui.path: /swagger-ui
  api-docs.path: /api-docs
  cache:
    disabled: true
  show-actuator: true